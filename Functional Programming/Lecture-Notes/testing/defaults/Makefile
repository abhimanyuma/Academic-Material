# Do not edit this file unless you know what you are doing.
# A typical usage requires you to define the following variables
#
#    1. SUBDIRS: the list of subdirectores
#
#    2. HTML: The html files.
#
#    3. FILES: The files (in this directory) that have to be exported
#       to the homepage.  You probably dont need to set this variable
#       as the default updates all files listed in the variable
#       ${HTML}.
#
#    4. DARCS_REPO: If the current directory hosts a darcs repository
#       then location of the repository.
#
#    5. DARCS_BRANCHES: The branches of the repository that are to be
#       published.
#
#    6. LITERATE_HASKELL: This variable contains the literate haskell
#	that are to be published as html, pdf and literate haskell
#	source itself.

# Also customise the two commands if needed
#
#    1. M4
#
#    2. PANDOC
#
#
# so that m4-ised markdown is converted to html and then include this
# file. This will provide you with all the default targets and
# variables. All you need is to define all and clean. Read on if you
# want to do something fancy.

.DEFAULT_GOAL=all

#
# Default setting of FILES
# ------------------------

LHS_HTML = $(addsuffix .html, ${LITERATE_HASKELL})
LHS_TEX  = $(addsuffix .tex,  ${LITERATE_HASKELL})
LHS_PDF  = $(addsuffix .pdf,  ${LITERATE_HASKELL})
LHS_AUX  = $(addsuffix .aux,  ${LITERATE_HASKELL})
LHS_LOG  = $(addsuffix .log,  ${LITERATE_HASKELL})
LHS_OUT  = $(addsuffix .out,  ${LITERATE_HASKELL})

FILES ?= ${HTML} ${LHS_HTML} ${LHS_TEX} ${LHS_PDF} ${LITERATE_HASKELL}

# Define the variables M4 and PANDOC if not defined by the user

M4 ?= m4 -P -D BASE_URL=${BASE_URL} \
         -D SCRIPTS=${SCRIPTS} \
         -D MACROS=${MACROS}

TOHTML  ?= pandoc -s --to=html
TOLATEX ?= pandoc -s --to=latex

# Export these macros so the customisation works submakes as well.

export M4
export TOHTML TOLATEX



# We assume that the html files are generated from markdown m4 files,
# i.e.  m4 files which expand to valid markdown file. To avoid
# accidental use of m4 builtins we use m4 -P; hence to use any
# builtins, prefix it with 'm4_'.



# This make files provides the following rules.
#
#      1. Defaults rules for generating html files from the markdown
#         m4 files.
#
#      2. Default rules default-all default-clean default-update
#         and default-update-dryrun.
#
#      3. Rules subdir subdir-clean subdir-update and subdir-update-dryrun



# Default rule for html files.
# ----------------------------


%.html : %.txt.m4
	${M4} -D DIR=${DIR} $< | ${TOHTML} --from=markdown > $@

# Default rule for literate haskell files

%.lhs	: %.lhs.m4
	${M4} -D DIR=${DIR} $< > $@

%.lhs.html : %.lhs
	${TOHTML} --from markdown+lhs $< > $@

%.lhs.tex : %.lhs
	${TOLATEX} --from markdown+lhs $< > $@

%.lhs.pdf  : %.lhs.tex
	pdflatex $<
	pdflatex $<
	pdflatex $<


.PHONY : subdirs subdirs-clean subdirs-files
.PHONY : default-all default-clean

#
# The default rules
# -----------------

default-all: subdirs ${HTML} literate-haskell darcs-branches tarballs changes

default-clean: subdirs-clean
	rm -rf ${HTML} .files
	rm -rf ${DARCS_BRANCHES}
	rm -rf ${LHS_TEX} ${LHS_PDF} ${LHS_HTML}
	rm -rf ${LHS_AUX} ${LHS_OUT} ${LHS_LOG}
	rm -rf ${LITERATE_HASKELL}



# Exact contents of .files depends on the variable FILES. 

.PHONY: .files
.files : subdirs-files
	rm -f .files
	$(foreach f, ${FILES}, echo ${DIR}/${f} >> .files;)
	$(foreach dir, ${SUBDIRS}, cat ${dir}/.files >> .files;)
	$(foreach br, ${DARCS_BRANCHES}, find ${br} -name '*' | \
		awk '{ printf "${DIR}/%s\n",$$0 }' >> .files;\
		echo ${DIR}/${br}.tar.gz >> .files;)
#
# Building, updating, cleaning subdirs
# ------------------------------------

subdirs:
	$(foreach dir,${SUBDIRS}, make DIR=${DIR}/${dir} -C ${dir};)

subdirs-files:
	$(foreach dir,${SUBDIRS}, make DIR=${DIR}/${dir} -C ${dir} .files;)
subdirs-clean:
	$(foreach dir,${SUBDIRS}, make DIR=${DIR}/${dir} -C ${dir} clean;)


# Darcs repository commands

NAME ?= $(notdir ${DARCS_REPO})

.PHONY: darcs-branches version tarballs changes

darcs-branches:
	$(foreach br, ${DARCS_BRANCHES},\
		if [ -d ${br} ];\
		then \
			darcs pull --repodir=${br} ${DARCS_REPO}/${br};\
		else \
			darcs get ${DARCS_REPO}/${br};\
		fi;)
version:
	$(foreach br, ${DARCS_BRANCHES}, darcs show tags --repodir=${br} |\
		 head -n 1 | tr ' ' '-' > ${br}/VERSION;)
tarballs: version
	$(foreach br, ${DARCS_BRANCHES},\
		darcs dist --repodir=${br} -d ${NAME}-`cat ${br}/VERSION`;\
		mv ${br}/${NAME}-`cat ${br}/VERSION`.tar.gz \
			${br}.tar.gz;)
changes:
	$(foreach br, ${DARCS_BRANCHES},\
		darcs changes --repodir=${br} > ${br}/CHANGES.txt;)

literate-haskell: ${LHS_TEX} ${LHS_PDF} ${LHS_HTML} ${LITERATE_HASKELL}